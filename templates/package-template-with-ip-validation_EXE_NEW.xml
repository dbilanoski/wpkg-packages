<?xml version="1.0" encoding="UTF-8"?>

<packages:packages xmlns:packages="http://www.wpkg.org/packages"
	xmlns:wpkg="http://www.wpkg.org/wpkg"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.wpkg.org/packages ../xsd/packages.xsd">

	<package id='your-package-id' 
		name='Name Of The Software' 
		revision="%SYS_VERSION%" 
		priority='30' 
		reboot='false' >

		<!-- 
			This package relies on ip address validation script here: https://github.com/dbilanoski/wpkg-packages/blob/main/assets/wpkg_ip_validator.ps1

			Script logic:
				* Script will check if you current IP address is in the range of you internal supernet (IP_SITE_SUPERNET variable)
					* if yes, it will exit with 500 (means user is on internal network)
					* if no, it will exit with 501 (means users is not on internal network)
					* exit code 2 means you provided empty or wrong formatted ip address with -ip argument


			WPKG package logic:
				* If user is on RAVPN, package will be downloaded from %DL_LINK_*% then installed (validation script returned 501) 
				* If user is on internal network, package will install from local file server (validation script returned 500)
			
			NOTE 
				* Since the <condition> tag only affects the direct parent tag, not the whole nested stack, using conditioned download under install (install > download > condition, the old way ) is not preferable as it returns error
			 	* This is why in this approach we have download performed as install tag

			TODO:
				* (New-Object System.Net.WebClient).DownloadFile($url, $path_to_file)
				- for testing later, it performs better and might be better supported

		-->

		<!-- VARIABLES -->
		<variable name="SYS_VERSION" value="system-version-as-seen-in-add-remove-programs" />
		<variable name="UNINSTALL_STRING" value="{application-pd-code}" />
		<variable name="IP_VALIDATION_SCRIPT" value="\\your-path-to-ip-validator-script\ip_validator.ps1" />
		<variable name="IP_SITE_SUPERNET" value="your.site.ip.supernet" />
		<variable name="DL_SOURCE_1" value="https://public-repo-link-of-the-application/application-name.exe" />
		<variable name="DL_TARGET_1" value="C:\Users\Public\Downloads\application-name.exe" />
		<variable name="INSTALL_ARGS" value="/silent /norestart /others-you-can-check-by-running-exe-file-from-cmd-with-/?-switch" />

		<!-- VALIDATION (if software is already installed) -->
		<check type="uninstall" condition="versiongreaterorequal" path="software-string-as-shown-in-add-remove-programs %sys_version%" value="%sys_version%" />

		<!-- INSTALLATION PROCEDURE -->

		<!-- Dowload from internet in case machine is off-site and file not already downloaded -->
		<install cmd='C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -ExecutionPolicy Bypass -command "&#038; Invoke-WebRequest -Uri %DL_SOURCE_1% -OutFile %DL_TARGET_1%"'>
			<condition>
				<check type="logical" condition="and" >
					<check type="execute" path='C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -executionpolicy bypass -File "%IP_VALIDATION_SCRIPT%" -ip %IP_SITE_SUPERNET%' condition="exitcodeequalto" value="501" />
					<check type="logical" condition="not" >
						<check type="file" condition="exists" path="%DL_TARGET_1%" />
					</check>
				</check>
			</condition>
		</install>

		<!-- If download was successfull (workstation is not on-site) or file was already there, install from it -->
		<install cmd='%DL_TARGET_1% %INSTALL_ARGS%'>
			<condition>
				<check type="logical" condition="or" >
					<check type="file" condition="exists" path="%DL_TARGET_1%" />
					<check type="execute" path='C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -executionpolicy bypass -File "%IP_VALIDATION_SCRIPT%" -ip %IP_SITE_SUPERNET%' condition="exitcodeequalto" value="501" />
				</check>
			</condition>
		</install>
		
		<!-- If download was not successfull (workstation is on-site), install from internal file server -->
		<install cmd='%SOFTWARE%\application-folder\application-name.exe %INSTALL_ARGS%'>
			<condition>
				<check type="logical" condition="and" >
					<check type="execute" path='C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -executionpolicy bypass -File "%IP_VALIDATION_SCRIPT%" -ip %IP_SITE_SUPERNET%' condition="exitcodeequalto" value="500" />
					<check type="logical" condition="not" >
						<check type="file" condition="exists" path="%DL_TARGET_1%" />
					</check>
				</check>
			</condition>
		</install>


		<!-- UPGRADE PROCEDURE -->
		<!-- Check if your software handles upgrade without manual uninstallation. If not, uncomment remove inclusion below. -->
		<upgrade include="remove" />
		<upgrade include="install" />

		<!-- DOWNGRADE PROCEDURE -->
		<downgrade include="remove" />
		<downgrade include="install" />

		<!-- UNINSTALL PROCEDURE -->
		<remove cmd='wmic product where "name like "program-name%%"" call uninstall' />

		<!-- CLEANUP PROCEDURE-->
		<!-- If you want to delete downloaded files (might be wise to leave them) -->
		<remove cmd='%comspec% /c del %DL_TARGET1%'>
			<exit code="any" />
		</remove>

		</package>

	</packages:packages>